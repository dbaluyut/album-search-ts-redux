import {
  createAsyncThunk,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { Album } from "../AlbumCard/AlbumCard"
import ALBUM_DATA_ARR from "../../mock/albumDataArr"
import axios from "axios"

export interface searchResultsState {
  searchResults: Album[]
  status: "idle" | "loading" | "failed"
  searchTerm: string
}

const initialState: searchResultsState = {
  searchResults: ALBUM_DATA_ARR,
  searchTerm: "",
  status: "idle",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchAlbumAsync = createAsyncThunk(
  "searchResults/getSearchResults",
  async (searchTerm: string) => {
    const response = await axios.get(
      `https://itunes.apple.com/search?term=${searchTerm}&media=music&entity=album&attribute=artistTerm&limit=200`
    )
    // The value we return becomes the `fulfilled` action payload

    return response.data
  }
)

export const searchResultsSlice = createSlice({
  name: "searchResults",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSearchTerm: (state, action: PayloadAction<string>) => {
      state.searchTerm = action.payload
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchAlbumAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(searchAlbumAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.searchResults = action.payload.results
      })
      .addCase(searchAlbumAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { setSearchTerm } = searchResultsSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectsearchResults = (state: RootState) =>
  state.searchResults.searchResults

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default searchResultsSlice.reducer
